{"version":3,"sources":["Utility/locationData.js","Components/SearchBar.js","Utility/utils.js","Components/WeatherTable.js","Components/WeatherTile.js","Components/WeatherApp.js","App.js","serviceWorker.js","index.js"],"names":["locationData","SearchBar","updateLocation","getLocation","className","htmlFor","name","id","autoFocus","map","location","coord","lon","lat","key","value","onClick","event","coords","target","timeConversion","utcSeconds","day","Date","setUTCSeconds","toLocaleTimeString","WeatherTable","current","isLoading","sunrise","sunset","Math","round","feels_like","weather","description","uvi","wind_speed","humidity","WeatherTile","dailyWeather","console","log","getDay","dayConversion","dt","src","icon","alt","WeatherApp","daily","App","currentError","error","code","PERMISSION_DENIED","POSITION_UNAVAILABLE","TIMEOUT","UNKNOWN_ERROR","success","a","position","latitude","longitude","navigator","geolocation","getCurrentPosition","endpoint","parseFloat","fetch","response","json","data","updateCurrent","updateDaily","setIsLoading","useState","useEffect","getData","split","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.7735a767.chunk.js","sourcesContent":["export const locationData = [\r\n  {\r\n    \"id\": 2643743,\r\n    \"name\": \"London\",\r\n    \"state\": \"\",\r\n    \"country\": \"GB\",\r\n    \"coord\": {\r\n      \"lon\": -0.12574,\r\n      \"lat\": 51.50853\r\n    }\r\n  },\r\n  {\r\n    \"id\": 2643123,\r\n    \"name\": \"Manchester\",\r\n    \"state\": \"\",\r\n    \"country\": \"GB\",\r\n    \"coord\": {\r\n      \"lon\": -2.23743,\r\n      \"lat\": 53.480949\r\n    }\r\n  },\r\n  {\r\n    \"id\": 2655603,\r\n    \"name\": \"Birmingham\",\r\n    \"state\": \"\",\r\n    \"country\": \"GB\",\r\n    \"coord\": {\r\n      \"lon\": -1.89983,\r\n      \"lat\": 52.481419\r\n    }\r\n  },\r\n  {\r\n    \"id\": 3333167,\r\n    \"name\": \"Liverpool\",\r\n    \"state\": \"\",\r\n    \"country\": \"GB\",\r\n    \"coord\": {\r\n      \"lon\": -2.91667,\r\n      \"lat\": 53.416672\r\n    }\r\n  },\r\n  {\r\n    \"id\": 2654710,\r\n    \"name\": \"Brighton\",\r\n    \"state\": \"\",\r\n    \"country\": \"GB\",\r\n    \"coord\": {\r\n      \"lon\": -0.13947,\r\n      \"lat\": 50.828381\r\n    }\r\n  },\r\n  {\r\n    \"id\": 2654675,\r\n    \"name\": \"Bristol\",\r\n    \"state\": \"\",\r\n    \"country\": \"GB\",\r\n    \"coord\": {\r\n      \"lon\": -2.59665,\r\n      \"lat\": 51.455231\r\n    }\r\n  },\r\n]","import React from 'react'\r\nimport { locationData } from '../Utility/locationData'\r\n\r\n\r\nexport default function SearchBar({ updateLocation, getLocation }) {\r\n\r\n  return (\r\n    <div className=\"search-bar\">\r\n      <label htmlFor=\"locations\">Choose a city: </label>\r\n      <select\r\n        name=\"locations\"\r\n        className=\"search-box\"\r\n        id=\"locations\"\r\n        autoFocus\r\n      >\r\n        {locationData.map(location => {\r\n          const {lon, lat} = location.coord;\r\n          return <option\r\n            key={location.id}\r\n            value={[lat, lon]}\r\n            onClick={(event) => updateLocation(\r\n              { coords: event.target.value, name: location.name }\r\n            )}>\r\n            {location.name}\r\n          </option>\r\n        })}\r\n      </select>\r\n      <button className=\"btn gps-btn\" onClick={() => getLocation()}><span>Use my location</span></button>\r\n    </div>\r\n  )\r\n}\r\n","export function dayConversion(utcSeconds) {\r\n  // Creates new date variable\r\n  let day = new Date(0); // The 0 there is the key, which sets the date to the epoch\r\n  // Sets the date\r\n  day.setUTCSeconds(utcSeconds);\r\n  // Converts full date into just a day, which is a number initially. Switch statement then converts to string\r\n  switch (day.getDay()) {\r\n    case 0:\r\n      day = 'Sunday'\r\n      break;\r\n    case 1:\r\n      day = 'Monday'\r\n      break;\r\n    case 2:\r\n      day = 'Tuesday'\r\n      break;\r\n    case 3:\r\n      day = 'Wednesday'\r\n      break;\r\n    case 4:\r\n      day = 'Thursday'\r\n      break;\r\n    case 5:\r\n      day = 'Friday'\r\n      break;\r\n    case 6:\r\n      day = 'Saturday'\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  return day\r\n}\r\n\r\nexport function timeConversion(utcSeconds) {\r\n  let day = new Date(0)\r\n  day.setUTCSeconds(utcSeconds)\r\n  return day.toLocaleTimeString()\r\n}\r\n\r\n","import React from 'react'\r\nimport { timeConversion } from '../Utility/utils'\r\n\r\nexport default function WeatherTable({ current, isLoading }) {\r\n  return (\r\n    isLoading ?\r\n      <div className=\"current-table\">\r\n        <h6 className=\"loading\">Loading...</h6>\r\n      </div>\r\n      :\r\n      <div className=\"current-table\">\r\n        <table>\r\n          <tbody>\r\n              \r\n            <tr>\r\n              <td>Sunrise</td>\r\n              <td>{timeConversion(current.sunrise)}</td>\r\n            </tr>\r\n              \r\n            <tr>\r\n              <td>Sunset</td>\r\n              <td>{timeConversion(current.sunset)}</td>\r\n            </tr>\r\n              \r\n            <tr>\r\n              <td>Feels Like</td>\r\n              <td>{Math.round(current.feels_like) + 'Â°C'}</td>\r\n            </tr>\r\n    \r\n            <tr>\r\n              <td>Desc.</td>\r\n              <td>{current.weather[0].description}</td>\r\n            </tr>\r\n              \r\n            <tr>\r\n              <td>UV Index</td>\r\n              <td>{Math.round(current.uvi)}</td>\r\n            </tr>\r\n              \r\n            <tr>\r\n              <td>Windspeed</td>\r\n              <td>{current.wind_speed}m/s</td>\r\n            </tr>\r\n              \r\n            <tr>\r\n              <td>Humidity</td>\r\n              <td>{current.humidity + '%'}</td>\r\n            </tr>\r\n              \r\n          </tbody>\r\n        </table>\r\n      </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport {dayConversion} from '../Utility/utils'\r\n\r\nexport default function WeatherTile({ dailyWeather, isLoading, day }) {\r\n  return (\r\n    isLoading ?\r\n      <div className=\"weather-tile-display\">\r\n        <h6 className=\"loading\">Loading...</h6>\r\n      </div>\r\n      :\r\n      <div className=\"weather-tile-container\" key={day} onClick={() => console.log(dailyWeather[day])}>\r\n        <h6 className=\"weather-tile-day ellipsis\">{dayConversion(dailyWeather[day].dt)}</h6>\r\n        <img className=\"weather-tile-img\" src={`http://openweathermap.org/img/wn/${dailyWeather[day].weather[0].icon}@2x.png`} alt=\"Weather description\" />\r\n        <p className=\"weather-tile-desc\">{dailyWeather[day].weather[0].description}</p>\r\n        <p className=\"weather-tile-temp\">{Math.round(dailyWeather[day].feels_like.day) + 'Â°C'}</p>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport WeatherTable from './WeatherTable'\r\nimport WeatherTile from './WeatherTile'\r\n\r\nexport default function WeatherApp({ daily, current, isLoading, location }) {\r\n  return (\r\n    <div className=\"weather-container flex\">\r\n      <div className=\"current flex\">\r\n        <h2 className=\"location-heading\">{location.name}</h2>\r\n        <WeatherTile dailyWeather={daily} isLoading={isLoading} day={0} />\r\n        <WeatherTable current={current} isLoading={isLoading} />\r\n      </div>\r\n      <div className=\"five-day-forecast flex\">\r\n        <h3 className=\"forecast-header\">5 Day Forecast</h3>\r\n        <WeatherTile dailyWeather={daily} isLoading={isLoading} day={1} />\r\n        <WeatherTile dailyWeather={daily} isLoading={isLoading} day={2} />\r\n        <WeatherTile dailyWeather={daily} isLoading={isLoading} day={3} />\r\n        <WeatherTile dailyWeather={daily} isLoading={isLoading} day={4} />\r\n        <WeatherTile dailyWeather={daily} isLoading={isLoading} day={5} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport SearchBar from './Components/SearchBar'\nimport WeatherApp from './Components/WeatherApp'\n\n\n\nfunction App() {\n\n  function currentError(error) {\n    switch (error.code) {\n      case error.PERMISSION_DENIED:\n        console.log(\"User denied the request for Geolocation.\")\n        break;\n      case error.POSITION_UNAVAILABLE:\n        console.log(\"Location information is unavailable.\")\n        break;\n      case error.TIMEOUT:\n        console.log(\"The request to get user location timed out.\")\n        break;\n      case error.UNKNOWN_ERROR:\n        console.log(\"An unknown error occurred.\")\n        break;\n      default:\n        console.log(`Switch failed`)\n    }\n  };\n\n  async function GetLocation() {\n    // If user allows then this data will be gathered\n    function success(position) {\n      const latitude = position.coords.latitude;\n      const longitude = position.coords.longitude;\n      console.log(latitude, longitude);\n      updateLocation({\n        coords: `${latitude},${longitude}`,\n        name: 'User Location'\n      })\n    }\n    // If user disallows GPS info, then error displayed\n    // TODO - Render error message on the actual page, not just the console\n    // Handle success or fail of getting user permission\n    if (!navigator.geolocation) {\n      currentError();\n    } else {\n      console.log('Locatingâ¦');\n      navigator.geolocation.getCurrentPosition(success, currentError);\n    }\n  }\n\n  async function getData(coords) {\n    const [lat, lon] = coords;\n    const endpoint = `https://api.openweathermap.org/data/2.5/onecall?lat=${parseFloat(lat)}&lon=${parseFloat(lon)}&exclude=minutely,hourly&units=metric&appid=9feab22816732accf10687c5d41227d7`\n    try {\n      const response = await fetch(endpoint);\n      const data = await response.json();\n      updateCurrent(data.current)\n      updateDaily(data.daily)\n      setIsLoading(false);\n    } catch (error) {\n      console.log(`Whoops! ${error}`)\n    }\n  }\n\n  // London\n  // Lat: 51.509865\n  // Lon: -0.118092\n\n  const [current, updateCurrent] = useState([]);\n  const [daily, updateDaily] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [location, updateLocation] = useState({coords: '51.50,-0.11', name: 'London'});\n\n\n\n  // useEffect(() => {\n  //   getData()\n  // }, [])\n\n  useEffect(() => {\n    getData(location.coords.split(','))\n  }, [location])\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <SearchBar updateLocation={updateLocation} getLocation={GetLocation}/>\n      </header>\n      <main>\n        <WeatherApp current={current} daily={daily} isLoading={isLoading} location={location} />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}